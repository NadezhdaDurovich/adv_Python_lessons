# Урок 5. Итераторы и генераторы

# Задание 1.

# Пользователь вводит строку из четырёх или более целых чисел, разделённых символом “/”. Cформируйте словарь, где: 1) второе и третье число являются ключами;
# 2) первое число является значением для первого ключа.; 3) четвертое и все возможные последующие числа хранятся в кортеже как значения второго ключа.

# a, b, c, *d = input("Введите строку из целых чисел, разделенных /: ").split('/')
# my_dictionary = {c: tuple(d), b: a}
# print(my_dictionary)

# Задание 2.

# Самостоятельно сохраните в переменной строку текста. Создайте из строки словарь, где ключ — буква, а значение — код буквы. Напишите преобразование в одну строку. 
# text = 'Без труда не устанешь'
# dictionary = {k: ord(k) for k in text}
# print(dictionary)

# Задание 3.
# Продолжаем развивать задачу 2. Возьмите словарь, который вы получили. Cохраните его итератор. Далее выведите первые 5 пар ключ-значение,обращаясь к итератору, а не к словарю.

# import sys

# iterator = iter(dictionary.items())
# print (iterator, type(iterator), sys.getsizeof(iterator),sys.getsizeof(dictionary))
# print(next(iterator))
# print(next(iterator))
# print(next(iterator))
# print("Здесь начинается for")
# # for item in iterator:
# #     print(item)
# for item in range(5):
#     print(next(iterator))


# Задание 4.

# Создайте генератор чётных чисел от нуля до 100. Из последовательности исключите числа, сумма цифр которых равна 8. Решение в одну строку.

# print(*(i for i in range(0, 101, 2) if sum(map(int, str(i))) != 8)) 
# print(*(i for i in range(0, 101, 2) if sum([int(j) for j in str(i)]) != 8))  # то же самое

# Задание 5.

# Напишите программу, которая выводит на экран числа от 1 до 100. При этом вместо чисел, кратных трем, программа должна выводить слово «Fizz»
# Вместо чисел, кратных пяти — слово «Buzz». Если число кратно и 3, и 5, то программадолжна выводить слово «FizzBuzz».
# *Превратите решение в генераторное выражение.

# print (*("FizzBazz" if i % 15 == 0 
#          else "Fizz" if i % 3 == 0 
#          else "Buzz" if i % 5 == 0
#          else i
#          for i in range(1,101)))


# Задание 6.

# Выведите в консоль таблицу умножения от 2х2 до 9х10 как на школьной тетрадке. Таблицу создайте в виде однострочного генератора,
# где каждый элемент генератора — отдельный пример таблицы умножения. Для вывода результата используйте «принт» без перехода на новую строку.
# *Превратите решение в генераторное выражение.

# print(*(f'{i} * {j} = {i * j}\t \t' if i < 6 else ('\n') for j in range(2,11) for i in range (2,7) ))
# print(*(f'{i} * {j} = {i * j}\t \t' if i < 10 else ('\n') for j in range(2,11) for i in range (6,11) ))
        


# Задание 7.

# Создайте функцию-генератор. Функция генерирует N простых чисел, начиная с числа 2. 
# Для проверки числа на простоту используйте правило: «число является простым, если делится нацело только на единицу и на себя».

def prime(n):
    if n < 3:
        return True
    if n % 2 == 0:
        return False
    for i in range (3, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def generate_simple():
    n = 2
    while True:
        if prime(n):
            yield n
        n += 1

j = generate_simple()
for _ in range(int(input('Введите число N: '))):
    print(next(j), end=' ')